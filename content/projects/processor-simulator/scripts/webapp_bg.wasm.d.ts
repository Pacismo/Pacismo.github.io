/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_cacheconfiguration_free(a: number): void;
export function __wbg_get_cacheconfiguration_mode(a: number): number;
export function __wbg_set_cacheconfiguration_mode(a: number, b: number): void;
export function __wbg_get_cacheconfiguration_set_bits(a: number): number;
export function __wbg_set_cacheconfiguration_set_bits(a: number, b: number): void;
export function __wbg_get_cacheconfiguration_offset_bits(a: number): number;
export function __wbg_set_cacheconfiguration_offset_bits(a: number, b: number): void;
export function __wbg_get_cacheconfiguration_ways(a: number): number;
export function __wbg_set_cacheconfiguration_ways(a: number, b: number): void;
export function cacheconfiguration_new(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_simulationconfiguration_free(a: number): void;
export function __wbg_get_simulationconfiguration_instruction_cache(a: number): number;
export function __wbg_set_simulationconfiguration_instruction_cache(a: number, b: number): void;
export function __wbg_get_simulationconfiguration_data_cache(a: number): number;
export function __wbg_set_simulationconfiguration_data_cache(a: number, b: number): void;
export function __wbg_get_simulationconfiguration_writethrough(a: number): number;
export function __wbg_set_simulationconfiguration_writethrough(a: number, b: number): void;
export function __wbg_get_simulationconfiguration_pipelining(a: number): number;
export function __wbg_set_simulationconfiguration_pipelining(a: number, b: number): void;
export function simulationconfiguration_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function simulationconfiguration_as_json(a: number): number;
export function __wbg_get_simulationconfiguration_miss_penalty(a: number): number;
export function __wbg_get_simulationconfiguration_volatile_penalty(a: number): number;
export function __wbg_set_simulationconfiguration_miss_penalty(a: number, b: number): void;
export function __wbg_set_simulationconfiguration_volatile_penalty(a: number, b: number): void;
export function about(a: number): void;
export function __wbg_simulatormemoryconfiguration_free(a: number): void;
export function __wbg_get_simulatormemoryconfiguration_page_count(a: number): number;
export function __wbg_set_simulatormemoryconfiguration_page_count(a: number, b: number): void;
export function __wbg_get_simulatormemoryconfiguration_page_size(a: number): number;
export function __wbg_set_simulatormemoryconfiguration_page_size(a: number, b: number): void;
export function __wbg_get_simulatormemoryconfiguration_regions(a: number): number;
export function __wbg_set_simulatormemoryconfiguration_regions(a: number, b: number): void;
export function __wbg_get_simulatormemoryconfiguration_region_size(a: number): number;
export function __wbg_set_simulatormemoryconfiguration_region_size(a: number, b: number): void;
export function simulatormemoryconfiguration_get(): number;
export function __wbg_simulationstate_free(a: number): void;
export function simulationstate_new(a: number, b: number, c: number, d: number): void;
export function simulationstate_get_configuration(a: number): number;
export function simulationstate_is_done(a: number): number;
export function simulationstate_clock(a: number): number;
export function simulationstate_step(a: number): number;
export function simulationstate_run(a: number): void;
export function simulationstate_read_address(a: number, b: number, c: number, d: number): void;
export function simulationstate_read_pipeline_state(a: number): number;
export function simulationstate_read_cache_state(a: number): number;
export function simulationstate_read_registers(a: number): number;
export function simulationstate_read_registers_fp32(a: number): number;
export function simulationstate_get_region_hash(a: number, b: number, c: number): void;
export function simulationstate_read_region(a: number, b: number, c: number): void;
export function simulationstate_disassemble_region(a: number, b: number, c: number): void;
export function simulationstate_get_stats(a: number): number;
export function __wbg_input_free(a: number): void;
export function input_new(a: number, b: number, c: number, d: number): number;
export function assemble_files(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
